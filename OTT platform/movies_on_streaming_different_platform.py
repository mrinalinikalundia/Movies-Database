# -*- coding: utf-8 -*-
"""Movies on streaming different platform.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15bXoH1-BQATCSCZ0lYp7aftummsDE-BZ
"""
#import libaries
import pandas as pd
import numpy as np
#importing dataset
df=pd.read_csv('/content/MoviesOnStreamingPlatforms_updated.csv.zip')
#run and look the dataset
df
#checking some meta information
df.info()
#checking null values
df.isna().sum()
#changing null value to mean of IMDb
df['IMDb'].fillna(df['IMDb'].mean,inplace=True)
#changing null value to mean of Runtime
df['Runtime'].fillna(df['Runtime'].mean,inplace=True)
#dropping the columns
df.drop(['Rotten Tomatoes','Unnamed: 0','Type','Directors'],axis=1,inplace=True)
#droping the null values
df.dropna(how='any',inplace=True)
#checking if dataset is having missing value
df.isna().sum()
#change id column as index value
df = df.set_index('ID')
df.tail()
importing visualisation libaries
import seaborn as sns
import plotly.express as px
import matplotlib.pyplot as plt

year_movie = df.groupby('Year')[['Netflix','Hulu','Prime Video','Disney+']].sum()

x=df['Year']
y=year_movie

bins=[1900,1920,1940,1960,1980,2000,2020]
plt.hist(x, bins=bins,edgecolor='black',log=True)
plt.title('Total Movies per year')
plt.ylabel('no of values')
plt.xlabel('Year')

def split_mulcol(x):
    res = x.to_frame()
    opt = []
    
    for i, j  in x[x.notnull()].iteritems():
        
        for k in j.split(','):
            
            if not k in res.columns:
                opt.append(k)
                res[k] = False
            
            res.at[i, k] = True
    
    return res[opt]

lang = split_mulcol(df["Language"])
lang = lang.sum().sort_values(ascending=False).reset_index()
lang = pd.DataFrame(lang.values, columns=['Language',"No. of Movies"])

plt.figure(figsize = (15,5))
lang = lang[:20]
ax = sns.barplot(x=lang["Language"], y= lang["No. of Movies"], data=lang ,palette = "coolwarm")
plt.title ("Top 20 languages for movies")
plt.xticks(rotation = 45, ha = 'right')
plt.xlabel("Language")
plt.ylabel("No. of Movies")
plt.show()

genres = split_mulcol(df["Genres"])
genres = genres.sum().sort_values(ascending=False).reset_index()
genres = pd.DataFrame(genres.values, columns=['Genre',"No. of Movies"])
genres = genres[:20]

plt.figure(figsize = (15,5))
ax = sns.barplot(x=genres["Genre"], y= genres["No. of Movies"], data=genres , palette = "rocket")
plt.title ("Distribution among the Genres")
plt.xticks(rotation = 45, ha = 'right')
plt.xlabel("Genres")
plt.ylabel("No. of Movies")
plt.show()

cont = split_mulcol(df["Country"])
cont = cont.sum().sort_values(ascending=False).reset_index()
cont = pd.DataFrame(cont.values, columns=['Country',"No. of Movies"])
cont = cont[:30]

plt.figure(figsize = (15,5))
ax = sns.barplot(x=cont["Country"], y= cont["No. of Movies"], data=cont , palette = "viridis")
plt.title ("Top 30 countries with the most releases")
plt.xticks(rotation = 74, ha = 'right')
plt.xlabel("Country")
plt.ylabel("No. of Movies")
plt.show()

df_age = df.Age.value_counts().reset_index()
df_age = pd.DataFrame(df_age.values, columns = ['Age', "No. of Movies"]).sort_values('No. of Movies',ascending=False)

plt.figure(figsize = (15,5))
ax = sns.barplot(x=df_age["Age"], y= df_age["No. of Movies"], data=df , palette = "rocket")
plt.title ("No. of Movies for the minimum age")
plt.xticks(rotation = 45, ha = 'right')
plt.xlabel("Min age")
plt.ylabel("No. of Movies")
plt.show()

mpppy = df.groupby('Year')[['Netflix','Hulu','Prime Video','Disney+']].sum()
plt.figure(figsize = (16, 8))
sns.lineplot(x=mpppy.index,y=mpppy['Netflix'], color='red', label='Netflix')
sns.lineplot(x=mpppy.index,y=mpppy['Hulu'], color = 'green', label='Hulu')
sns.lineplot(x=mpppy.index,y=mpppy['Prime Video'], color = 'blue', label='Prime Videos')
sns.lineplot(x=mpppy.index,y=mpppy['Disney+'], color = 'black', label='Disney+')
plt.title("Movies per platform of particular years")
plt.legend()
plt.xlabel('Release Year')
plt.ylabel('No. of Movies')
plt.show()

genres = df['Genres'].str.get_dummies(',')
data = pd.concat([df,genres],axis=1,sort=False)

netflix = len(data[data['Netflix']==1])
hulu = len(data[data['Hulu']==1])
prime = len(data[data['Prime Video']==1])
disney = len(data[data['Disney+']==1])
Platform=['Netflix','Hulu','Prime Video','Disney+']
Count = [netflix,hulu,prime,disney]

fig = px.pie(names=Platform,values=Count,title='Movie Count Of Different Platforms',
            color_discrete_sequence=px.colors.sequential.Sunsetdark)
fig.update_traces(textposition='inside', textinfo='percent+label')
fig.show()

features = data[['Action', 'Adventure', 'Animation',
                 'Biography', 'Comedy', 'Crime', 'Documentary', 'Drama', 'Family',
                 'Fantasy', 'Film-Noir', 'History', 'Horror', 'Music',
                 'Musical', 'Mystery', 'News', 'Reality-TV', 'Romance', 'Sci-Fi',
                 'Short', 'Sport','Thriller', 'War', 'Western']].astype(int)

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
scaled_data = scaler.fit_transform(features)

from sklearn.manifold import TSNE
from sklearn.cluster import KMeans

tsne = TSNE(n_components=2)
transformed_genre = tsne.fit_transform(scaled_data)

distortions = []
K = range(1,100)
for k in K:
    kmean = KMeans(n_clusters=k)
    kmean.fit(scaled_data)
    distortions.append(kmean.inertia_)
fig = px.line(x=K,y=distortions,title='The Elbow Method Showing The Optimal K',
              labels={'x':'No of Clusters','y':'Distortions'})
fig.show()

cluster = KMeans(n_clusters=27)
group_pred = cluster.fit_predict(scaled_data)

tsne_df = pd.DataFrame(np.column_stack((transformed_genre,group_pred,data['Title'],data['Genres'])),columns=['X','Y','Group','Title','Genres'])

fig = px.scatter(tsne_df,x='X',y='Y',hover_data=['Title','Genres'],color='Group',
                 color_discrete_sequence=px.colors.cyclical.IceFire)
fig.show()

